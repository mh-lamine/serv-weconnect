generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                     String   @id @default(cuid())
  email                  String   @unique
  password               String
  phoneNumber            String   @unique
  address                String
  isProvider             Boolean  @default(false)
  hasActiveSubscription  Boolean  @default(false)
  isInVacancyMode        Boolean  @default(false)
  autoAcceptAppointments Boolean  @default(false)
  firstName              String?
  lastName               String?
  providerName           String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  appointmentsAsProvider Appointment[]     @relation("provider")
  appointmentsAsClient   Appointment[]     @relation("client")
  providerCategories     ProviderCategory[]
  reviewsAsProvider      Review[]          @relation("provider")
  reviewsAsClient        Review[]          @relation("client")
  availabilities         Availability[]
  tags                   Tags[]
}

model Availability {
  id        String    @id @default(cuid())
  dayOfWeek DayOfWeek
  startTime DateTime
  endTime   DateTime

  providerId String
  provider   User   @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String            @id @default(cuid())
  date      DateTime
  status    AppointmentStatus @default(PENDING)
  details  String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  providerId String
  clientId   String
  serviceId  String
  provider   User   @relation("provider", fields: [providerId], references: [id], onDelete: Cascade)
  client     User   @relation("client", fields: [clientId], references: [id], onDelete: Cascade)
  service    ProviderService @relation(fields: [serviceId], references: [id])
}

model Tags {
  id   String @id @default(cuid())
  name String
  users User[]
}

model ProviderCategory {
  id          String   @id @default(cuid())
  name        String
  providerId  String
  provider    User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  services    ProviderService[]
}

model ProviderService {
  id                String   @id @default(cuid())
  name              String
  price             Float
  duration          Int
  description       String?
  providerCategoryId String
  providerCategory  ProviderCategory @relation(fields: [providerCategoryId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  providerId String
  clientId   String?
  provider   User  @relation("provider", fields: [providerId], references: [id], onDelete: Cascade)
  client     User ?  @relation("client", fields: [clientId], references: [id], onDelete: SetNull)
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}