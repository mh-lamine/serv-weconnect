generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  CANCELLED
  COMPLETED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Plan {
  NONE
  ESSENTIAL
  PRO
  ENTERPRISE
  FRANCHISE
}

enum Role {
  USER
  PRO
  SALON
  MEMBER
}

enum PaymentOption {
  ON_SITE
  DEPOSIT
  FULL
}

enum PaymentStatus {
  PENDING
  PARTLY_PAID
  FULLY_PAID
  REFUNDED
}

model User {
  id                     String                @id @default(cuid())
  email                  String?               @unique
  password               String
  phoneNumber            String                @unique
  address                String?
  isProvider             Boolean               @default(false)
  isInVacancyMode        Boolean               @default(false)
  autoAcceptAppointments Boolean               @default(false)
  firstName              String?
  lastName               String?
  providerName           String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  profilePicture         String?
  bookingTerms           String?
  coverImage             String?
  contactMethods         Json?
  daysLeftInTrial        Int                   @default(0)
  isFreeTrial            Boolean               @default(false)
  plan                   Plan                  @default(NONE)
  role                   Role                  @default(USER)
  appointmentsAsClient   Appointment[]         @relation("client")
  appointmentsAsProvider Appointment[]         @relation("provider")
  availabilities         Availability[]
  providerCategories     ProviderCategory[]
  providerServices       ProviderService[]
  refreshToken           RefreshToken?
  reviews                Review[]
  specialAvailabilities  SpecialAvailability[]
  unavailabilities       Unavailability[]
  tags                   Tags[]                @relation("TagsToUser")
}

model Pro {
  id                     String                @id @default(cuid())
  name                   String?
  email                  String                @unique
  password               String
  phoneNumber            String?               @unique
  stripeConnectedAccountId String?           @unique
  defaultDeposit         Float                @default(0)
  defaultPaymentOption   PaymentOption        @default(ON_SITE)
  contactMethods         Json?
  address                String?
  profilePicture         String?
  coverImage             String?
  bookingTerms           String?
  isFreeTrial            Boolean               @default(false)
  daysLeftInTrial        Int                   @default(0)
  plan                   Plan                  @default(NONE)
  isInVacancyMode        Boolean               @default(false)
  autoAcceptAppointments Boolean               @default(false)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  role                   Role                  @default(PRO)
  appointments           Appointment[]
  availabilities         Availability[]
  providerCategories     ProviderCategory[]
  providerServices       ProviderService[]
  refreshToken           RefreshToken?
  specialAvailabilities  SpecialAvailability[]
  unavailabilities       Unavailability[]
  tags                   Tags[]                @relation("ProToTags")
}

model Salon {
  id                     String                @id @default(cuid())
  name                   String
  email                  String                @unique
  password               String
  phoneNumber            String                @unique
  stripeConnectedAccountId String?           @unique
  defaultDeposit         Float                @default(0)
  defaultPaymentOption   PaymentOption        @default(ON_SITE)
  address                String
  isFreeTrial            Boolean               @default(false)
  daysLeftInTrial        Int                   @default(0)
  plan                   Plan                  @default(NONE)
  profilePicture         String?
  coverImage             String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  role                   Role                  @default(SALON)
  autoAcceptAppointments Boolean               @default(true)
  isInVacancyMode        Boolean               @default(false)
  bookingTerms           String?
  isProvider             Boolean               @default(true)
  appointments           Appointment[]
  availabilities         Availability[]
  members                Member[]
  providerCategories     ProviderCategory[]
  providerServices       ProviderService[]
  refreshToken           RefreshToken?
  specialAvailabilities  SpecialAvailability[]
  unavailabilities       Unavailability[]
  tags                   Tags[]                @relation("SalonToTags")
}

model Member {
  id                    String                @id @default(cuid())
  firstName             String
  lastName              String
  accessCode            String                @unique
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  salonId               String
  role                  Role                  @default(MEMBER)
  appointments          Appointment[]
  availabilities        Availability[]
  salon                 Salon                 @relation(fields: [salonId], references: [id], onDelete: Cascade)
  refreshToken          RefreshToken?
  specialAvailabilities SpecialAvailability[]
  unavailabilities      Unavailability[]
  services              ProviderService[]     @relation("memberServices")
}

model Availability {
  id         String           @id @default(cuid())
  dayOfWeek  DayOfWeek
  providerId String?
  startTime  String
  endTime    String
  memberId   String?
  salonId    String?
  serviceId  String?
  proId      String?
  member     Member?          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  pro        Pro?             @relation(fields: [proId], references: [id], onDelete: Cascade)
  provider   User?            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?           @relation(fields: [salonId], references: [id], onDelete: Cascade)
  service    ProviderService? @relation(fields: [serviceId], references: [id])
}

model SpecialAvailability {
  id         String  @id @default(cuid())
  date       String
  startTime  String
  endTime    String
  providerId String?
  memberId   String?
  salonId    String?
  proId      String?
  member     Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  pro        Pro?    @relation(fields: [proId], references: [id], onDelete: Cascade)
  provider   User?   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?  @relation(fields: [salonId], references: [id], onDelete: Cascade)
}

model Unavailability {
  id         String  @id @default(cuid())
  date       String
  startTime  String
  endTime    String
  providerId String?
  salonId    String?
  memberId   String?
  proId      String?
  member     Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  pro        Pro?    @relation(fields: [proId], references: [id], onDelete: Cascade)
  provider   User?   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?  @relation(fields: [salonId], references: [id], onDelete: Cascade)
}

model Appointment {
  id         String            @id @default(cuid())
  status     AppointmentStatus @default(PENDING)
  paymentStatus PaymentStatus   @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  providerId String?
  clientId   String
  serviceId  String
  details    String?
  date       String
  duration   Int
  memberId   String?
  salonId    String?
  proId      String?
  client     User              @relation("client", fields: [clientId], references: [id], onDelete: Cascade)
  member     Member?           @relation(fields: [memberId], references: [id], onDelete: Cascade)
  pro        Pro?              @relation(fields: [proId], references: [id], onDelete: Cascade)
  provider   User?             @relation("provider", fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?            @relation(fields: [salonId], references: [id], onDelete: Cascade)
  service    ProviderService   @relation(fields: [serviceId], references: [id])
}

model Tags {
  id     String  @id @default(cuid())
  name   String
  pros   Pro[]   @relation("ProToTags")
  salons Salon[] @relation("SalonToTags")
  users  User[]  @relation("TagsToUser")
}

model ProviderCategory {
  id         String            @id @default(cuid())
  name       String
  providerId String?
  isActive   Boolean           @default(false)
  salonId    String?
  proId      String?
  pro        Pro?              @relation(fields: [proId], references: [id], onDelete: Cascade)
  provider   User?             @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?            @relation(fields: [salonId], references: [id], onDelete: Cascade)
  services   ProviderService[]
}

model ProviderService {
  id                 String           @id @default(cuid())
  duration           Int
  name               String
  price              Float
  providerCategoryId String
  description        String?
  providerId         String?
  isActive           Boolean          @default(true)
  deposit            Float            @default(0)
  paymentOption      PaymentOption    @default(ON_SITE)
  salonId            String?
  proId              String?
  appointments       Appointment[]
  availabilities     Availability[]
  pro                Pro?             @relation(fields: [proId], references: [id], onDelete: Cascade)
  providerCategory   ProviderCategory @relation(fields: [providerCategoryId], references: [id], onDelete: Cascade)
  provider           User?            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon              Salon?           @relation(fields: [salonId], references: [id], onDelete: Cascade)
  reviews            Review[]
  member             Member[]         @relation("memberServices")
}

model Review {
  id                String          @id @default(cuid())
  rating            Float
  comment           String?
  createdAt         DateTime        @default(now())
  clientId          String
  providerServiceId String
  client            User            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  providerService   ProviderService @relation(fields: [providerServiceId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  token     String?  @unique
  createdAt DateTime @default(now())
  userId    String?  @unique
  id        String   @id @default(cuid())
  salonId   String?  @unique
  memberId  String?  @unique
  proId     String?  @unique
  member    Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  pro       Pro?     @relation(fields: [proId], references: [id], onDelete: Cascade)
  salon     Salon?   @relation(fields: [salonId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}