generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
}

model User {
  id                     String   @id @default(cuid())
  email                  String?   @unique
  password               String
  phoneNumber            String   @unique
  contactMethods         Json?
  address                String?
  profilePicture         String?
  coverImage             String?
  bookingTerms           String?
  isProvider             Boolean  @default(false)
  isFreeTrial            Boolean  @default(false)
  daysLeftInTrial        Int      @default(0)
  plan                   Plan     @default(NONE)
  isInVacancyMode        Boolean  @default(false)
  autoAcceptAppointments Boolean  @default(false)
  firstName              String?
  lastName               String?
  providerName           String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  refreshToken           RefreshToken?
  role                   Role     @default(USER)

  appointmentsAsProvider Appointment[]     @relation("provider")
  appointmentsAsClient   Appointment[]     @relation("client")
  providerCategories     ProviderCategory[]
  providerServices       ProviderService[]
  reviews        Review[]
  availabilities         Availability[]
  specialAvailabilities  SpecialAvailability[]
  unavailabilities       Unavailability[]
  tags                   Tags[]
}

model Provider {
  id                     String   @id @default(cuid())
}

model Salon {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  password        String
  phoneNumber     String   @unique
  address         String
  bookingTerms           String?
  isProvider      Boolean  @default(true)
  isInVacancyMode        Boolean  @default(false)
  autoAcceptAppointments Boolean  @default(true)
  isFreeTrial     Boolean  @default(false)
  daysLeftInTrial Int      @default(0)
  plan            Plan     @default(NONE)
  profilePicture  String?
  coverImage      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            Role     @default(SALON)
  refreshToken    RefreshToken?

  members         Member[]
  providerCategories ProviderCategory[]
  providerServices   ProviderService[]
  appointments      Appointment[]
  availabilities     Availability[]
  specialAvailabilities SpecialAvailability[]
  unavailabilities   Unavailability[]
  tags               Tags[]
}

model Member {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  accessCode String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role      @default(MEMBER)
  refreshToken RefreshToken?

  salonId String
  salon   Salon  @relation(fields: [salonId], references: [id], onDelete: Cascade)

  appointments Appointment[]
  availabilities Availability[]
  specialAvailabilities SpecialAvailability[]
  unavailabilities Unavailability[]
  services ProviderService[] @relation("memberServices")
}

model Availability {
  id        String    @id @default(cuid())
  dayOfWeek DayOfWeek
  startTime String
  endTime   String

  providerId String?
  salonId  String?
  memberId  String?
  serviceId String?
  provider   User?   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?  @relation(fields: [salonId], references: [id], onDelete: Cascade)
  member     Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  service    ProviderService? @relation(fields: [serviceId], references: [id])
}

model SpecialAvailability {
  id        String    @id @default(cuid())
  date      String
  startTime String
  endTime   String

  providerId String?
  salonId  String?
  memberId  String?
  provider   User?   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?  @relation(fields: [salonId], references: [id], onDelete: Cascade)
  member     Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Unavailability {
  id        String    @id @default(cuid())
  date      String
  startTime String
  endTime   String

  providerId String?
  salonId  String?
  memberId  String?
  provider   User?   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?  @relation(fields: [salonId], references: [id], onDelete: Cascade)
  member     Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String            @id @default(cuid())
  date      String
  duration  Int
  status    AppointmentStatus @default(PENDING)
  details   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  providerId String?
  salonId    String?
  memberId   String?
  clientId   String
  serviceId  String
  provider   User?   @relation("provider", fields: [providerId], references: [id], onDelete: Cascade)
  salon      Salon?  @relation(fields: [salonId], references: [id], onDelete: Cascade)
  member     Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  client     User   @relation("client", fields: [clientId], references: [id], onDelete: Cascade)
  service    ProviderService @relation(fields: [serviceId], references: [id])
}

model Tags {
  id   String @id @default(cuid())
  name String
  users User[]
  salons Salon[]
}

model ProviderCategory {
  id          String   @id @default(cuid())
  name        String
  isActive    Boolean  @default(false)
  providerId  String?
  salonId     String?
  provider    User?     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon       Salon?    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  services    ProviderService[]
}

model ProviderService {
  id                String   @id @default(cuid())
  name              String
  price             Float
  deposit           Float    @default(0)
  duration          Int
  description       String?
  isActive          Boolean  @default(true)
  providerId        String?
  salonId           String?
  providerCategoryId String
  provider          User?   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  salon             Salon?  @relation(fields: [salonId], references: [id], onDelete: Cascade)
  providerCategory  ProviderCategory @relation(fields: [providerCategoryId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  reviews           Review[]
  availabilities     Availability[]
  member            Member[] @relation("memberServices")
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  clientId   String
  providerServiceId   String
  client     User  @relation( fields: [clientId], references: [id], onDelete: Cascade)
  providerService     ProviderService  @relation( fields: [providerServiceId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String  @id @default(cuid())
  token     String?  @unique
  createdAt DateTime @default(now())
  userId    String?   @unique
  salonId   String?   @unique
  memberId String?   @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  salon     Salon?   @relation(fields: [salonId], references: [id], onDelete: Cascade)
  member    Member?  @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  CANCELLED
  COMPLETED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
enum Plan {
  NONE
  ESSENTIAL
  PRO
  ENTERPRISE
  FRANCHISE
}

enum Role {
  USER
  SALON
  MEMBER
}